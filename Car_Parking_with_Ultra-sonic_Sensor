// Its an Arduino IDE code for the HMP(Hardware Mini Project) of Car Parking with Ultrasonic Senosr by using Arduino UNO.


#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// LCD setup
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Slot 1
const int trig1 = 2; //Digital
const int echo1 = 3; //Digital
const int buzzer1 = 4; //Digital
const int redLED1 = 8; //Digital
const int greenLED1 = 9; //Digital

// Slot 2
const int trig2 = 5; //Digital 
const int echo2 = 6; //Digital
const int buzzer2 = 7; //Digital
const int redLED2 = 10; //Digital
const int greenLED2 = 11; //Digital

// Constants
const int parkThreshold = 20;     // Distance for parking (cm)
const int warnDistance = 19;      // Distance for red warning (cm)
const int spacingLimit = 25;      // Min space between cars (cm)

bool slot1Occupied = false;
//digitalWrite(redLED, LOW);
//digitalWrite(greenLED, HIGH);
bool slot2Occupied = false;
//digitalWrite(redLED, LOW);
//digitalWrite(GreeenLED, HIGH);

void setup() 
{
  lcd.begin();
  lcd.backlight();

  // Setup pins for Sensors
  pinMode(trig1, OUTPUT);  pinMode(echo1, INPUT);
  pinMode(buzzer1, OUTPUT); pinMode(redLED1, OUTPUT); pinMode(greenLED1, OUTPUT);

  pinMode(trig2, OUTPUT);  pinMode(echo2, INPUT);
  pinMode(buzzer2, OUTPUT); pinMode(redLED2, OUTPUT); pinMode(greenLED2, OUTPUT);

  lcd.setCursor(0, 0);
  lcd.print("Initializing...");
  delay(2000);
  lcd.clear();

  //In addition, can i do some initial changes
  
  //lcd.setCursor(0, 0);
  //lcd.print("S1: ");
  //lcd.setCursor(8, 0);
  //lcd.print("S2: ");
}

//     if (slot1Occupied == false)
     //   {
       //   digitalWrite(redLED, LOW);
         // digitalWrite(greenLED, HIGH);
       // }else if (slot1Occupied == true)
      //  {
        //  digitalWrite(redLED, HIGH);
          //digitalWrite(greenLED, LOW);
        //}

void loop() 
{
  // Read distances
  int dist1 = getDistance(trig1, echo1);
  int dist2 = getDistance(trig2, echo2)

  // Slot 1 conditions
  if (dist1 <= warnDistance) // Which is set 19cm 
  {
    digitalWrite(buzzer1, HIGH);
    digitalWrite(redLED1, HIGH);         
    digitalWrite(greenLED1, LOW);        
    slot1Occupied = false;                
  } else if (dist1 >= parkThreshold) // Which is set 20cm
  {
    digitalWrite(buzzer1, LOW);
    digitalWrite(redLED1, HIGH);
    digitalWrite(greenLED, LOW);
    slot1Occupied = true;
  }else if (dist1 <= spacingLimit) /// Which is set 25cm
  {
    digitalWrite(buzzer1, LOW);
    digitalWrite(redLED1, LOW);
    digitalWrite(greenLED1, HIGH);
    
    if (!slot1Occupied) beep(buzzer1);
    slot1Occupied = true;
  } else 
  {
    digitalWrite(buzzer1, LOW);
    digitalWrite(redLED1, LOW);
    digitalWrite(greenLED1, HIGH);
    
    if (slot1Occupied) beep(buzzer1);
    slot1Occupied = false;
  }

  // Slot 2 conditions
  if (dist2 <= warnDistance) 
  {
    digitalWrite(buzzer2, HIGH);
    digitalWrite(redLED2, HIGH);
    digitalWrite(greenLED2, LOW);
    slot2Occupied = false;
  } else if (dist2 >= parkThreshold) 
  {
    digitalWrite(buzzer2, LOW);
    digitalWrite(redLED2, LOW);
    digitalWrite(greenLED2, HIGH);
    if (!slot2Occupied) beep(buzzer2);
    slot2Occupied = true;
  }else if (dist2 <= spacingLimit) 
  {
    digitalWrite(buzzer2, LOW);
    digitalWrite(redLED2, LOW);
    digitalWrite(greenLED2, HIGH);
    if (!slot2Occupied) beep(buzzer2);
    slot2Occupied = true;
  } else 
  {
    digitalWrite(buzzer2, LOW);
    digitalWrite(redLED2, LOW);
    digitalWrite(greenLED2, HIGH);
    if (slot2Occupied) beep(buzzer2);
    slot2Occupied = false;
  }

  // Check spacing condition
  // bool tooClose = false;
  // if (slot1Occupied && slot2Occupied) 
  // {
  //   int spacing = abs(dist1 - dist2);
  //   if (spacing < spacingLimit) 
  //   {
  //    tooClose = true;
    //  digitalWrite(buzzer1, HIGH);
      //digitalWrite(buzzer2, HIGH);
  //   }
  // }

  // LCD display
  lcd.clear();
 // if (tooClose) 
 //  {
 //    lcd.setCursor(0, 0);
 //    lcd.print("Too Close! Move");
 //    lcd.setCursor(0, 1);
 //    lcd.print("Repark Safely!");
 //  } else 
 // {
    // S1 is for Slot 1
    lcd.setCursor(0, 0);
    lcd.print("S1:"); 
    lcd.print(slot1Occupied ? "Parked " : "Empty  ");

    // S2 is for slot 2
    lcd.setCursor(8, 0);
    lcd.print("S2:"); 
    lcd.print(slot2Occupied ? "Parked" : "Empty ");

    lcd.setCursor(0, 1);
    lcd.print("Ready for Parking");
 // }

  delay(500);
}

// Distance calculation for ms converting into cm
int getDistance(int trigPin, int echoPin) 
{
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  long duration = pulseIn(echoPin, HIGH, 30000);
  int distance = duration * 0.034 / 2;
  
  if (distance == 0 || distance > 400) return 400;
  return distance;
}

// Beep sound of Buzzers 
void beep(int pin) 
{
  digitalWrite(pin, HIGH);
  delay(150);
  digitalWrite(pin, LOW);
}